#!/usr/bin/env ruby

require "optimist"
require "ticketmaster-sdk"

def bullet(str)
  puts " - #{str}"
end

def format_date(date)
  date.strftime("%Y-%m-%d")
end

opts = Optimist::options do

  version "EventXplorer #{File.read(File.expand_path("../../VERSION", __FILE__)).strip}"
  banner self.version

  opt :city, "Select City", type: :string
  opt :size, "display size of events", type: :integer
  opt :radius, "Radius from city", type: :integer
  opt :from, "Start date", type: :string
  opt :to, "End date", type: :string
  opt :sales_from, "Sales start date", type: :string
  opt :sales_to, "Sales end date", type: :string
end

ticketmaster = Ticketmaster.client(apikey: "1zAnm9SkBt0d0wAflQnGfG01qS5dOZgB")

# Take some params directly from the options
params = opts.select { |k, _| %i[city size radius].include? k }

{ from: :startDateTime, to: :endDateTime }.each do |opt_key, param_key|
  params[param_key] = opts[opt_key] ? DateTime.parse(opts[opt_key]) : nil
end

ticketmaster.search_events(params: params).results.each do |event|
  sales_data = event.data["sales"]["public"]
  sales_start, sales_end = [sales_data["startDateTime"], sales_data["endDateTime"]].map do |time|
    time ? DateTime.parse(time) : nil
  end

  # Skip this event if sales are out of user-specified range
  next if sales_start && opts[:sales_from] && sales_start < DateTime.parse(opts[:sales_from])
  next if sales_end && opts[:sales_to] && sales_end > DateTime.parse(opts[:sales_to])

  puts event.name
  bullet event.venues.first.name

  if event.dates["start"]["localTime"]
    bullet "#{event.dates["start"]["localDate"]} @ #{event.dates["start"]["localTime"][0..-4]}"
  end

  if sales_start && sales_end
    bullet "Sales from #{format_date sales_start} to #{format_date sales_end}"
  end
end
